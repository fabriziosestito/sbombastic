/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"context"
	"fmt"

	apierrors "k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	logf "sigs.k8s.io/controller-runtime/pkg/log"

	"github.com/rancher/sbombastic/api"
	storagev1alpha1 "github.com/rancher/sbombastic/api/storage/v1alpha1"
	sbombasticv1alpha1 "github.com/rancher/sbombastic/api/v1alpha1"
)

// VulnerabilityReportReconciler reconciles a VulnerabilityReport object
type VulnerabilityReportReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

// +kubebuilder:rbac:groups=storage.sbombastic.rancher.io,resources=vulnerabilityreports,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=storage.sbombastic.rancher.io,resources=vulnerabilityreports/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=storage.sbombastic.rancher.io,resources=vulnerabilityreports/finalizers,verbs=update

// Reconcile reconciles a VulnerabilityReport object.
func (r *VulnerabilityReportReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := logf.FromContext(ctx)

	vulnerabilityReport := &storagev1alpha1.VulnerabilityReport{}
	if err := r.Get(ctx, req.NamespacedName, vulnerabilityReport); err != nil {
		if !apierrors.IsNotFound(err) {
			return ctrl.Result{}, fmt.Errorf("unable to fetch Registry: %w", err)
		}

		return ctrl.Result{}, nil
	}

	if !vulnerabilityReport.DeletionTimestamp.IsZero() {
		return ctrl.Result{}, nil
	}

	scanJobName, ok := vulnerabilityReport.Labels[api.LabelScanJob]
	if !ok {
		return ctrl.Result{}, fmt.Errorf("scan job name not found in labels for VulnerabilityReport %s", req.NamespacedName)
	}

	scanJob := &sbombasticv1alpha1.ScanJob{}
	if err := r.Get(ctx, client.ObjectKey{Name: scanJobName, Namespace: req.Namespace}, scanJob); err != nil {
		return ctrl.Result{}, fmt.Errorf("failed to get ScanJob %s: %w", scanJobName, err)
	}

	vulnerabilityReports := &storagev1alpha1.VulnerabilityReportList{}
	if err := r.List(ctx, vulnerabilityReports,
		client.InNamespace(req.Namespace),
		client.MatchingLabels{api.LabelScanJob: scanJobName},
	); err != nil {
		return ctrl.Result{}, fmt.Errorf("failed to list VulnerabilityReports: %w", err)
	}

	log.V(1).Info("counted VulnerabilityReports",
		"scanJob", scanJobName,
		"imagesCount", scanJob.Status.ImagesCount,
		"scanndeImagesCount", len(vulnerabilityReports.Items))

	scanJob.Status.ScannedImagesCount = len(vulnerabilityReports.Items)
	if scanJob.Status.ScannedImagesCount == scanJob.Status.ImagesCount {
		scanJob.MarkComplete(sbombasticv1alpha1.ReasonAllImagesScanned, "All images scanned successfully")
	}

	if err := r.Status().Update(ctx, scanJob); err != nil {
		return ctrl.Result{}, fmt.Errorf("failed to update ScanJob status: %w", err)
	}

	return ctrl.Result{}, nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *VulnerabilityReportReconciler) SetupWithManager(mgr ctrl.Manager) error {
	err := ctrl.NewControllerManagedBy(mgr).
		For(&storagev1alpha1.VulnerabilityReport{}).
		Complete(r)
	if err != nil {
		return fmt.Errorf("failed to create VulnerabilityReport controller: %w", err)
	}

	return nil
}
