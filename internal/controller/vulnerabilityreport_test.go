package controller

import (
	"context"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"

	"github.com/google/uuid"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"

	"github.com/rancher/sbombastic/api"
	storagev1alpha1 "github.com/rancher/sbombastic/api/storage/v1alpha1"
	sbombasticv1alpha1 "github.com/rancher/sbombastic/api/v1alpha1"
)

var _ = Describe("VulnerabilityReport Controller", func() {
	When("All VulnerabilityReports are created for a ScanJob", func() {
		var reconciler VulnerabilityReportReconciler
		var scanJob sbombasticv1alpha1.ScanJob

		BeforeEach(func(ctx context.Context) {
			By("Creating a new VulnerabilityReportReconciler")
			reconciler = VulnerabilityReportReconciler{
				Client: k8sClient,
			}

			By("Creating a ScanJob with 2 total images")
			scanJob = sbombasticv1alpha1.ScanJob{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "test-scanjob-complete",
					Namespace: "default",
				},
				Spec: sbombasticv1alpha1.ScanJobSpec{
					Registry: "test-registry",
				},
			}
			Expect(k8sClient.Create(ctx, &scanJob)).To(Succeed())

			By("Setting the ImagesCount")
			scanJob.Status.ImagesCount = 2
			Expect(k8sClient.Status().Update(ctx, &scanJob)).To(Succeed())
		})

		It("should mark the ScanJob as complete", func(ctx context.Context) {
			By("Creating the first VulnerabilityReport")
			firstVulnerabilityReport := storagev1alpha1.VulnerabilityReport{
				ObjectMeta: metav1.ObjectMeta{
					Name:      uuid.New().String(),
					Namespace: "default",
					Labels: map[string]string{
						api.LabelScanJob: scanJob.Name,
					},
				},
				Spec: storagev1alpha1.VulnerabilityReportSpec{
					SARIF: runtime.RawExtension{Raw: []byte("{}")},
				},
			}
			Expect(k8sClient.Create(ctx, &firstVulnerabilityReport)).To(Succeed())

			By("Reconciling the first VulnerabilityReport")
			_, err := reconciler.Reconcile(ctx, reconcile.Request{
				NamespacedName: types.NamespacedName{
					Name:      firstVulnerabilityReport.Name,
					Namespace: firstVulnerabilityReport.Namespace,
				},
			})
			Expect(err).NotTo(HaveOccurred())

			By("Verifying the ScanJob is not marked as complete")
			updatedScanJob := &sbombasticv1alpha1.ScanJob{}
			err = k8sClient.Get(ctx, types.NamespacedName{
				Name:      scanJob.Name,
				Namespace: scanJob.Namespace,
			}, updatedScanJob)
			Expect(err).NotTo(HaveOccurred())
			Expect(updatedScanJob.Status.ScannedImagesCount).To(Equal(1))
			Expect(updatedScanJob.IsComplete()).To(BeFalse())

			By("Creating the second VulnerabilityReport")
			secondVulnerabilityReport := storagev1alpha1.VulnerabilityReport{
				ObjectMeta: metav1.ObjectMeta{
					Name:      uuid.New().String(),
					Namespace: "default",
					Labels: map[string]string{
						api.LabelScanJob: scanJob.Name,
					},
				},
				Spec: storagev1alpha1.VulnerabilityReportSpec{
					SARIF: runtime.RawExtension{Raw: []byte("{}")},
				},
			}
			Expect(k8sClient.Create(ctx, &secondVulnerabilityReport)).To(Succeed())

			By("Reconciling the last VulnerabilityReport")
			_, err = reconciler.Reconcile(ctx, reconcile.Request{
				NamespacedName: types.NamespacedName{
					Name:      secondVulnerabilityReport.Name,
					Namespace: secondVulnerabilityReport.Namespace,
				},
			})
			Expect(err).NotTo(HaveOccurred())

			By("Verifying the ScanJob is marked as complete")
			updatedScanJob = &sbombasticv1alpha1.ScanJob{}
			err = k8sClient.Get(ctx, types.NamespacedName{
				Name:      scanJob.Name,
				Namespace: scanJob.Namespace,
			}, updatedScanJob)
			Expect(err).NotTo(HaveOccurred())
			Expect(updatedScanJob.Status.ScannedImagesCount).To(Equal(2))
			Expect(updatedScanJob.IsComplete()).To(BeTrue())
		})
	})

	When("A VulnerabilityReport references a non-existent ScanJob", func() {
		var reconciler VulnerabilityReportReconciler
		var vulnerabilityReport storagev1alpha1.VulnerabilityReport

		BeforeEach(func(ctx context.Context) {
			By("Creating a new VulnerabilityReportReconciler")
			reconciler = VulnerabilityReportReconciler{
				Client: k8sClient,
			}

			By("Creating a VulnerabilityReport with non-existent ScanJob")
			vulnerabilityReport = storagev1alpha1.VulnerabilityReport{
				ObjectMeta: metav1.ObjectMeta{
					Name:      uuid.New().String(),
					Namespace: "default",
					Labels: map[string]string{
						"sbombastic.rancher.io/scanjob": "non-existent-scanjob",
					},
				},
				Spec: storagev1alpha1.VulnerabilityReportSpec{
					SARIF: runtime.RawExtension{Raw: []byte("{}")},
				},
			}
			Expect(k8sClient.Create(ctx, &vulnerabilityReport)).To(Succeed())
		})

		It("should return an error", func(ctx context.Context) {
			By("Reconciling the VulnerabilityReport")
			_, err := reconciler.Reconcile(ctx, reconcile.Request{
				NamespacedName: types.NamespacedName{
					Name:      vulnerabilityReport.Name,
					Namespace: vulnerabilityReport.Namespace,
				},
			})
			Expect(err).To(HaveOccurred())
			Expect(err.Error()).To(ContainSubstring("failed to get ScanJob"))
		})
	})

	When("A VulnerabilityReport does not have the required label", func() {
		var reconciler VulnerabilityReportReconciler
		var vulnerabilityReport storagev1alpha1.VulnerabilityReport

		BeforeEach(func(ctx context.Context) {
			By("Creating a new VulnerabilityReportReconciler")
			reconciler = VulnerabilityReportReconciler{
				Client: k8sClient,
			}

			By("Creating a VulnerabilityReport without ScanJob label")
			vulnerabilityReport = storagev1alpha1.VulnerabilityReport{
				ObjectMeta: metav1.ObjectMeta{
					Name:      uuid.New().String(),
					Namespace: "default",
				},
				Spec: storagev1alpha1.VulnerabilityReportSpec{
					SARIF: runtime.RawExtension{Raw: []byte("{}")},
				},
			}
			Expect(k8sClient.Create(ctx, &vulnerabilityReport)).To(Succeed())
		})

		It("should return an error", func(ctx context.Context) {
			By("Reconciling the VulnerabilityReport")
			_, err := reconciler.Reconcile(ctx, reconcile.Request{
				NamespacedName: types.NamespacedName{
					Name:      vulnerabilityReport.Name,
					Namespace: vulnerabilityReport.Namespace,
				},
			})
			Expect(err).To(HaveOccurred())
			Expect(err.Error()).To(ContainSubstring("scan job name not found in labels"))
		})
	})
})
